unit untPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Buttons, Vcl.StdCtrls;

type
  TfrmPrincipal = class(TForm)
    Label1: TLabel;
    edtQuantidade: TEdit;
    btnImprimir: TButton;
    memFor: TMemo;
    memWhile: TMemo;
    memRepeat: TMemo;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    BitBtn1: TBitBtn;
    procedure btnImprimirClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmPrincipal: TfrmPrincipal;

implementation

{$R *.dfm}

procedure TfrmPrincipal.btnImprimirClick(Sender: TObject);

var i, qtd : integer;

begin

  //Recuparando a quantidade solicitada pelo usuário
  try //Testa a condição...
    qtd := StrToInt(edtQuantidade.Text); //Coloca o valor do edt na var qtd
  except //... se não passar
    ShowMessage('Digite apenas números inteiros'); //Informa o erro do usuário
    edtQuantidade.SetFocus; //Coloca o foco no componente que esta errado
    exit; //Finaliza o programa já que deu errado
  end;

  //Comparando com o laço For
  memFor.Lines.Clear; //Limpa as linha do memFor
  for i := 1 to qtd do //Faz o looping enquanto não atingir o limite
  begin
    memFor.Lines.Add(IntToStr(i)); //Adiciona as linhas com os números
  end;

  //Comparando com o laço While
  cont := 1; //Contador starta com valendo um
  memWhile.Lines.Clear; //Limpa as linhas do memWhile
  while (cont <= qtd) do //Enquanto o cont for menor ou igual a qtd ele imprimi
  begin
    memWhile.Lines.Add(IntToStr(cont)); //Adicina uma linha no memWhile
    cont := cont + 1; //Aumenta um no contador
  end;

  //Comparando com o laço Repeat/Until
  memRepeat.Lines.Clear; //Limpas as linha do memRepeat
  i := 1; //Contador do repeat starta em um
  repeat
    memRepeat.Lines.Add(IntToStr(i));
    i := i + 1;
  until (i <= qtd) ;

end;

end.
